{"version":3,"sources":["app/components/BackButton.js","app/config/index.js","app/context/SearchContext.js","app/components/LoadingGraphic.js","app/components/SearchForm.js","app/components/VideoListItem.js","app/components/VideoList.js","app/components/VideoPlayer.js","app/App.js","serviceWorker.js","index.js"],"names":["BackButton","route","to","className","youtubeDataApi","process","SearchContext","createContext","SearchContextProvider","children","useState","isLoading","setIsLoading","videos","setVideos","video","setVideo","search","query","a","url","fetch","response","json","data","videoArray","items","Provider","value","LoadingGraphic","hide","setHide","useContext","useEffect","SearchForm","setQuery","onSubmit","ev","preventDefault","type","onChange","target","VideoListItem","videoImg","videoTitle","videoDescription","videoClicked","onClick","src","VideoList","map","key","id","videoId","snippet","thumbnails","medium","title","description","videoID","VideoPlayer","width","height","Home","Detail","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.283fd681.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './BackButton.css';\r\n\r\nconst BackButton = ({route}) => {\r\n    return (\r\n        <Link to={route} className=\"backButton\">Back</Link>\r\n    );\r\n};\r\n\r\nexport default BackButton;","export const youtubeDataApi = {\r\n    apiKey: process.env.REACT_APP_YOUTUBE_DATAAPI_KEY,\r\n    searchUrl: process.env.REACT_APP_YOUTUBE_DATAAPI_SEARCHURL,\r\n};","import React, { createContext, useEffect, useState } from 'react';\r\n// import uuid from 'uuid/v1';\r\nimport { youtubeDataApi } from '../config';\r\n// import { LoadingGraphic } from '../components/LoadingGraphic';\r\n\r\nconst SearchContext = createContext();\r\n\r\n// const mockData = [\r\n//     { id: uuid(), title: 'Mijn kindjes wassen', completed: false, createdAt: Date.now() },\r\n//     { id: uuid(), title: 'Vegan food halen uit den Albert', completed: true, createdAt: Date.now() },\r\n//     { id: uuid(), title: 'Nieuw Macbook Pro 18inch afhalen at coolblue', completed: false, createdAt: Date.now() }\r\n// ];\r\n\r\nconst SearchContextProvider = ({children}) => {\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n    const [ videos, setVideos ] = useState([]);\r\n    const [ video, setVideo ] = useState('KMU0tzLwhbE');\r\n\r\n    const loadVideos = (videoArray) => {\r\n        setVideos(videoArray);\r\n    }\r\n\r\n    const search = async (query) => {\r\n        setIsLoading(true);\r\n\r\n        const url =\r\n        `${youtubeDataApi.searchUrl}?part=snippet&key=${youtubeDataApi.apiKey}&q=${query}&type=video`;\r\n\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        loadVideos(data.items);\r\n        \r\n        setIsLoading(false);\r\n    }\r\n\r\n    return (\r\n        <SearchContext.Provider value={{video, setVideo, isLoading, videos, search}}>\r\n            {children}\r\n        </SearchContext.Provider>\r\n    )\r\n};\r\n\r\nexport {\r\n    SearchContext,\r\n    SearchContextProvider,\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { SearchContext } from '../context';\r\n\r\nimport './LoadingGraphic.css';\r\n\r\nconst LoadingGraphic = () => {\r\n    const [hide, setHide] = useState(true);\r\n    const { isLoading } = useContext(SearchContext);\r\n\r\n    useEffect(() => {\r\n        setHide(!isLoading);\r\n    }, [isLoading]);\r\n\r\n    return (\r\n        <div className={`loading${hide ? ' loading--hide' : ''}`} />\r\n    );\r\n};\r\n\r\nexport default LoadingGraphic;","import React, { useState, useContext } from 'react';\r\nimport { SearchContext } from '../context/';\r\n\r\nimport './SearchForm.css';\r\n\r\nconst SearchForm = () => {\r\n    const [query, setQuery] = useState('');\r\n\r\n    const { search } = useContext(SearchContext);\r\n\r\n    const updateQuery = (ev) => {\r\n        setQuery(ev.target.value);\r\n    }\r\n\r\n    const handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        search(query);\r\n    }\r\n\r\n    return (\r\n        <form className=\"searchForm\" onSubmit={handleSubmit}>\r\n            <input type=\"text\" className=\"searchForm__input\" onChange={updateQuery} />\r\n            <button type=\"submit\" className=\"searchForm__button\">Search</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchForm;","import React, { useState, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import { SearchContext } from '../context/';\r\n\r\nconst VideoListItem = ({videoImg, videoTitle, videoDescription, videoClicked}) => {\r\n    return (\r\n        <Link to=\"/detail\">\r\n            <li className=\"videoList__item\" onClick={ev => videoClicked()}>\r\n                <div className=\"videoList__left\">\r\n                    <img className=\"videoList__itemThumbnail\" src={videoImg} />\r\n                </div>\r\n                <div className=\"videoList__right\">\r\n                    <h3 className=\"videoList__itemTitle\">{videoTitle}</h3>\r\n                    <p className=\"videoList__itemDescription\">{videoDescription}</p>\r\n                </div>\r\n            </li>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default VideoListItem;","import React, { useState, useContext } from 'react';\r\nimport { SearchContext } from '../context/';\r\n\r\nimport VideoListItem from './VideoListItem';\r\n\r\nimport './VideoList.css';\r\n\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst VideoList = () => {\r\n    const { videos, setVideo } = useContext(SearchContext);\r\n\r\n    const handleVideoClicked = (videoID) => {\r\n        setVideo(videoID);\r\n    }\r\n\r\n    return (\r\n        <div className=\"videoList\">\r\n            <ul>\r\n                {\r\n                    videos.map((video) => {\r\n                        // console.log(video);\r\n                        return (\r\n                            <VideoListItem key={video.id.videoId} videoImg={video.snippet.thumbnails.medium.url} videoTitle={video.snippet.title} videoDescription={video.snippet.description} videoClicked={() => handleVideoClicked(video.id.videoId)} />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoList;","import React, { useState, useContext } from 'react';\r\nimport { SearchContext } from '../context';\r\n\r\nimport './VideoPlayer.css';\r\n\r\nconst VideoPlayer = () => {\r\n    const { video } = useContext(SearchContext);\r\n    const url = `https://www.youtube.com/embed/${video}`;\r\n    return (\r\n        <div className=\"videoPlayer\">\r\n            <iframe width=\"80%\" height=\"400px\" src={url}></iframe>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoPlayer;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nimport { BackButton, LoadingGraphic, SearchForm, VideoPlayer, VideoList } from './components';\nimport { SearchContextProvider } from './context/SearchContext';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <SearchContextProvider>\n          <LoadingGraphic />\n          <Switch>\n            <Route path=\"/detail\">\n              <Detail />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </SearchContextProvider>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n      <div>\n        <SearchForm />\n        <VideoList />\n      </div>\n  );\n  // return <h2>Home</h2>;\n}\n\nfunction Detail() {\n  // return <h2>Detail</h2>;\n  return (\n    <div>\n      <BackButton route='/' />\n      <VideoPlayer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}